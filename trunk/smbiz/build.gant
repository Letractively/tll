/**
 * GANT build script
 * @author jpk, The Logic Lab
 *
 * CLASSPATH REQUIREMENTS:
 * ----------------------------------
 * - JAVA_HOME env var is set to a desired JDK installation 
 * - ant.jar (v1.7.0+) 
 * - commons-lang.jar (v2.3+)
 * - commons-logging.jar (v1.1.1+)
 * - commons-collections.jar (v3.2+)
 * - commons-configuration.jar (v1.5+)
 * - tll-config.jar (v1.0+)
 * - aspectjtools.jar (v1.5.4+)
 * - config.properties and optionally {machine name}.{user name}.config.properties or local.config.properties
 */
 
def config = com.tll.config.Config.instance();
def property = config.asMap(null, null);

def NL = System.getProperty("line.separator")

Ant.taskdef ( resource : 'org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties' , classpath: "${property.'aspectj.dir.install'}/lib/aspectjtools.jar" )
Ant.taskdef ( resource : 'testngtasks' , classpath: property.'testng.jar' )

Ant.patternset(id:'ps_classpathResourceFiles') {
	include(name:"**/*.properties")
	include(name:"**/*.xml")
	exclude(name:"**/context-s*.xml")
}

Ant.patternset(id:'ps_metaFiles') {
	include(name:"**/*.MF")
	include(name:"**/*.properties")
	include(name:"**/*.xml")
	exclude(name:"**/context-s*.xml")
}

Ant.patternset(id:'ps_libs') {
	include(name:"**/*.jar")
	include(name:"**/*.zip")
	exclude(name:"**/src/*")
}

// NOTE: we copy test related jars too!
Ant.patternset(id:'ps_libsDeploy') {
	patternset(refid:"ps_libs")
	exclude(name:"servlet-api.jar")
}
	
//	compile classpath for javac server 
def java_compile_server_classpath = Ant.path {
	pathelement(location: "${property.'aspectj.dir.install'}/lib/aspectjweaver.jar")
	pathelement(location: "${property.'gwt.dir.install'}/gwt-user.jar")
	pathelement(location: "${property.'project.dir.tll'}/config/dist/tll-config.jar")
	pathelement(location: "${property.'project.dir.tll'}/util/dist/tll-util.jar")
	pathelement(location: "${property.'project.dir.tll'}/mail/dist/tll-mail.jar")
	fileset(dir: property.'project.dir.tll.libs') {
		include(name: '*.jar')
	}
}
	
// compile classpath for javac server test
def java_compile_server_test_classpath = Ant.path {
	pathelement(location: "${property.'gwt.dir.install'}/gwt-user.jar")
	pathelement(location: "${property.'project.dir.tll'}/config/dist/tll-config.jar")
	pathelement(location: "${property.'project.dir.tll'}/util/dist/tll-util.jar")
	pathelement(location: "${property.'project.dir.tll'}/mail/dist/tll-mail.jar")
	fileset(dir: property.'project.dir.tll.libs') {
		include(name: '*.jar')
	}
	pathelement(location: "${property.'project.dir.build'}/server-classes")
}
	
// compile classpath for javac client 
def java_compile_client_classpath = Ant.path {
	pathelement(location: "${property.'project.dir.build'}/server-classes")
	pathelement(location: property.'gwt.dir.install' + '/gwt-user.jar')
	fileset(dir: property.'project.client.dir' + '/lib') {
		include(name: '*.jar')
	}
}
	
// run classpath for db tasks
def db_task_classpath = Ant.path {
	fileset(dir: property.'project.dir.tll.libs') {
		include(name: 'mysql-connector-java-bin.jar')
	}
}
	
// test run classpath
def java_run_server_test_classpath = Ant.path {
	pathelement(location: "${property.'project.dir.build.web'}/WEB-INF/classes")
	pathelement(location: "${property.'project.dir.build'}/server-classes-test")
	fileset(dir: "${property.'project.dir.build.web'}/WEB-INF/lib") {
		include(name: '**/*.jar')
		exclude(name: '**/**.zip')
		exclude(name: '**/src/*')
	}
	pathelement(location: "${property.'project.dir.tll.libs'}/servlet-api.jar")
}
	
// compile classpath for the gwt compiler 
def gwt_compile_classpath = Ant.path {
	pathelement(location: "${property.'gwt.dir.install'}/gwt-user.jar")
	pathelement(location: "${property.'gwt.dir.install'}/gwt-dev-windows.jar")
	pathelement(location: property.'project.client.dir' + '/src')
	pathelement(location: property.'project.server.dir' + '/src')
	fileset(dir: property.'project.client.dir' + '/lib') {
		include(name: '*.jar')
	}
}
	
// classpath for javadoc 
def javadoc_classpath = Ant.path {
	pathelement(location: "${property.'project.dir.build'}/client-classes")
	pathelement(location: "${property.'project.dir.build'}/server-classes")
	pathelement(location: property.'gwt.dir.install' + '/gwt-user.jar')
	fileset(dir: property.'project.client.dir' + '/lib') {
		include(name: '*.jar')
	}
	fileset(dir: property.'project.dir.tll.libs') {
		include(name: '*.jar')
	}
}
	 
/**
 * Replaces all occurrences of ${prop.name} with the property value held in the provided property map
 * NOTE: No variable interpolation is performed.
 * @param str The string that is searched for property place-holders
 * @param props The property map
 * @return String containing resolved property values 
 */
def rplProps = {String str, Map props -> 
	String rval = str;
	props.each { key, val -> rval = rval.replace('${' + key + '}', val) }
	return rval;
}
		
def buildGwtHostModeWebXml = { 
	println()
	println "Building GWT host mode web.xml..."
	String empiricalWebXml = (property.'project.server.dir' + '/resources').replace('\\', '/') + '/web.xml'
	String clientSrcDir = (property.'project.client.dir' + '/src').replace('\\', '/')
	String gwtHostModeWebXmlPath = clientSrcDir.replaceFirst(/src$/, "tomcat/webapps/ROOT/WEB-INF") + '/web.xml'

	def infile = new File(empiricalWebXml)
	StringBuilder sbuf = new StringBuilder(3000)
	infile.eachLine{ line -> 
		sbuf.append(rplProps(line, property))
		sbuf.append(NL)
	}
	
	def fWebXmlShell = new File(gwtHostModeWebXmlPath)
	fWebXmlShell.write(sbuf.toString().replaceFirst(/(?s)<web-app>\s+/, "<web-app>" + NL + '\t'))
}
	
def buildDeployWebXml = {
	println()
	println('Building deploy web.xml file...')
	String webXmlPath = (property.'project.server.dir' + '/resources/').replace('\\', '/') + 'web.xml'
	String webXmlDeployPath = (property.'project.dir.build.web').replace('\\', '/') + '/WEB-INF/web.xml'
	
	def infile = new File(webXmlPath)
	StringBuilder sbuf = new StringBuilder(3000)
	infile.eachLine{ line -> 
		sbuf.append(rplProps(line, property))
		sbuf.append(NL)
	}
	def fWebXmlDeploy = new File(webXmlDeployPath)
	
	// Extract GWTShellServlet && servlet-context from web.xml before copying
	def regex_deploy = /(?s)<!-- START Hosted Mode Add-ons -->(.*)<!-- END Hosted Mode Add-ons -->/
	fWebXmlDeploy.write(sbuf.toString().replaceAll(regex_deploy, '').replaceFirst(/(?s)<web-app>\s+/, "<web-app>" + NL + '\t'))
}

def buildGwtConstantsFile = {
	println()
	println('Building GWT Constants.properties file...')

	def gwtProps = new HashMap();
	gwtProps.put("appVersion", property.'app.version')
	gwtProps.put("environment", property.'environment')
	gwtProps.put("debug", property.'debug')

	String path = property.'project.client.dir' + '/src/' + property.'gwt.path.constants.file'
	def f = new File(path)
	f.createNewFile()
	StringBuilder sbuf = new StringBuilder(1000)
	gwtProps.each() {key, value -> 
		sbuf.append(key)
		sbuf.append(' ')
		sbuf.append(value)
		sbuf.append(NL)
	}
	f.write(sbuf.toString())
}
	
def gwtClean = { module ->
	println()
	println "Deleting GWT compiler output dir: " + module + "..."
	Ant.delete(quiet:'true', includeemptydirs:'true') {
		fileset(dir: "${property.'project.dir.build'}/${module}") {
			include(name:'**/*')
		}
	}
	println "Deleting GWT host mode module dir: " + module + " files..."
	String hostModeModuleDir = (property.'project.client.dir').replace('\\', '/') + "/tomcat/webapps/ROOT/" + module;
	Ant.delete(quiet:'true', includeemptydirs:'true') {
		fileset(dir: hostModeModuleDir) {
			include(name:'**/*')
		}
	}
}
	
def gwtCompile = { module ->
	gwtClean(module)
	println()
	println "Compiling GWT module: ${module} (style: ${property.'gwt.compile.style'})..."
	Ant.java(classname: 'com.google.gwt.dev.GWTCompiler', classpath: gwt_compile_classpath, fork: true) {
		jvmarg(value: property.'gwt.compile.memory')
		arg (value: '-out')
		arg (value: property.'project.dir.build') 
		arg (value: '-style')
		arg (value: property.'gwt.compile.style') 
		arg (value: module)
	}
	String hostModeModuleDir = (property.'project.client.dir').replace('\\', '/') + "/tomcat/webapps/ROOT/" + module;
	println "Copying " + module + " RPC serialization policy files to : " + hostModeModuleDir + "...";
	Ant.copy(todir: hostModeModuleDir) {
		fileset(dir: "${property.'project.dir.build'}/${module}") {
			include(name: '*.rpc')
		}
	}
}
	
// removes old gwt generated files from the build web deploy dir
// IMPT: we operate on the assumption that none of these files are nested in sub-directories
def gwtDeleteOldDeploy = {
	println()
	println 'Removing old GWT deployed files...'
	Ant.delete() {
		fileset(dir: property.'project.dir.build.web') {
			include(name: '*.*')
		}
	}
}
	
// create the manifest file
def manifest = {
	println()
	println 'Building manifest...'
		Ant.manifest(file: "${property.'project.dir.build'}/META-INF/MANIFEST.MF") {
			section(name: 'common') {
				attribute(name: 'Specification-Title', value: property.'project.name')
					attribute(name: 'Specification-Version', value: property.'project.spec.version')
					attribute(name: 'Specification-Vendor', value: property.'project.spec.vendor')
					attribute(name: 'Implementation-Title', value: property.'project.name')
					attribute(name: 'Implementation-Version', value: property.'project.version') 
					attribute(name: 'Implementation-Vendor', value: property.'project.vendor.id')
			}
		}
}
	
// remove compiled client .class files (ensures legitimate GWT compile)
def clearClientClasses = {
	println()
	println 'Deleting client classes dir...'
	Ant.delete(dir: "${property.'project.dir.build'}/client-classes")
}

// creates a log4j.properties file in the deploy WEB-INF/classes dir
def createBuildLog4JPropsFile = {
	println()
	println('Creating build log4j.properties file...')
	File f = new File(property.'project.dir.build.web' + '/WEB-INF/classes/log4j.properties')
	f.delete()
	config.saveAsPropFile(f, 'log4j', 'log4j.')
}

/**
 * Adds persistence related properties to the built persistence.xml file
 */
def createBuildPersistenceXmlFile = {
	println()
	println('Creating build persistence.xml file...')
	
	// pre-load the persistence specific props that are to be injected
	def map = config.asMap('hibernate', 'hibernate.')
			
	// get the prefix and suffix strings
	File f = new File("${property.'project.server.dir'}/resources/persistence.xml")
	StringBuilder sbuf = new StringBuilder()
	f.eachLine{ String line -> 
		// replace any occurrences of a property place-holder
		sbuf.append(rplProps(line, property))
		sbuf.append(NL)
	}
	
	// write the file to the build dir
	f = new File("${property.'project.dir.build.web'}/WEB-INF/classes/META-INF/persistence.xml")
	f.delete()
	f.write(sbuf.toString())
}

def dbCreate = { String dbName ->
	Ant.sql(url:"${property.'db.urlprefix'}/${property.'db.name.root'}", classpath:db_task_classpath, driver:property.'db.driver', userid:property.'db.username', password:property.'db.password', print:true) {
		transaction("create database ${dbName}")
	}
	Ant.sql(url:"${property.'db.urlprefix'}/${dbName}", classpath:db_task_classpath, driver:property.'db.driver', userid:property.'db.username', password:property.'db.password', print:true) {
		transaction(src:"${property.'project.server.dir'}/resources/db/${property.'db.file.schema'}")
	}
}

def dbDelete = { String dbName ->
	Ant.sql(url:"${property.'db.urlprefix'}/${property.'db.name.root'}", classpath:db_task_classpath, driver:property.'db.driver', userid:property.'db.username', password:property.'db.password', print:true) {
		transaction("drop database ${dbName}")
	}
}

def dbStub = { String dbName ->
	Ant.sql(url:"${property.'db.urlprefix'}/${dbName}", classpath:db_task_classpath, driver:property.'db.driver', userid:property.'db.username', password:property.'db.password', print:true) {
		transaction(src:"${property.'project.server.dir'}/resources/db/${property.'db.file.stub'}")
	}
}

def dbClear = { String dbName ->
	Ant.sql(url:"${property.'db.urlprefix'}/${dbName}", classpath:db_task_classpath, driver:property.'db.driver', userid:property.'db.username', password:property.'db.password', print:true) {
		transaction(src:"${property.'project.server.dir'}/resources/db/${property.'db.file.delete'}")
	}
}

// TEST target for testing createBuildPersistenceXmlFile
/*
target(persistFileTest:'target for testing createBuildPersistenceXmlFile closure') {
	depends(prepare)
	createBuildPersistenceXmlFile()
}
*/

long startTime = System.currentTimeMillis()
def duration = { 
	return Math.round((System.currentTimeMillis() - startTime) / 1000.0f) // in seconds
}

int targetCount = 0;
def targetStart = { targetCount++; }
def targetEnd = {
	if(--targetCount == 0) {
			println("BUILD SUCCESSFULL: " + duration() + " seconds")
	}
}
	
boolean isDeploy = false;

////// TARGETS

target(info: 'Echos the loaded Ant and Config properties') {
	
	// ant properties
	println('ANT PROPERTIES...')
	Ant.echoproperties()
	
	// config properties
	println()
	println('CONFIG PROPERTIES...')
	String s = ''
	property.each( { String key, String val -> s += key + ' = ' + val + NL } )
	Ant.echo(s)
}

target (prepare: 'create directories') {
	targetStart()
	println()
	println 'preparing...'
	Ant.mkdir(dir: property.'project.dir.build')
	Ant.mkdir(dir: property.'project.dir.build' + '/client-classes')
	Ant.mkdir(dir: property.'project.dir.build' + '/server-classes')
	Ant.mkdir(dir: property.'project.dir.build' + '/server-classes-woven')	// for aspectj compile time weaving
	Ant.mkdir(dir: property.'project.dir.build' + '/server-classes-test')
	Ant.mkdir(dir: property.'project.dir.build' + '/src')	// for javadocs
	Ant.mkdir(dir: property.'project.dir.build' + '/META-INF')	// war file manifest
	Ant.mkdir(dir: property.'project.dir.build.web')
	Ant.mkdir(dir: property.'project.dir.build.web' + '/WEB-INF')
	Ant.mkdir(dir: property.'project.dir.build.web' + '/WEB-INF/classes')
	Ant.mkdir(dir: property.'project.dir.build.web' + '/WEB-INF/classes/META-INF')
	Ant.mkdir(dir: property.'project.dir.build.web' + '/WEB-INF/lib')
	Ant.mkdir(dir: property.'project.dir.build.docs')
	Ant.mkdir(dir: property.'project.dir.dist')
	Ant.mkdir(dir: property.'project.dir.dist' + '/docs')
	Ant.mkdir(dir: property.'project.dir.dist' + '/docs/api')
	Ant.mkdir(dir: property.'gwt.dir.shell.server.deploy' + '/' + property.'gwt.module.admin')
	Ant.mkdir(dir: property.'gwt.dir.shell.server.deploy' + '/' + property.'gwt.module.tests')
	Ant.mkdir(dir: property.'gwt.dir.shell.server' + '/webapps/ROOT/WEB-INF')
	Ant.mkdir(dir: property.'gwt.dir.shell.server' + '/webapps/ROOT/email-templates')
	targetEnd()
}

target (clean: 'clean directories') {
	targetStart()
	println()
	println 'Cleaning directories...'
 	Ant.delete(dir: property.'project.dir.build')
	Ant.delete(dir: property.'project.dir.dist')
	Ant.delete(dir: property.'gwt.dir.shell.server.deploy')
	//Ant.delete(dir: property.'gwt.dir.shell.server.deploy' + '/' + property.'gwt.module.admin')
	//Ant.delete(dir: property.'gwt.dir.shell.server.deploy' + '/' + property.'gwt.module.tests')
	targetEnd()
}

target (cleanServerCompile: 'clean the compiled server classes from the build dir') {
	targetStart()
	println()
	println 'Cleaning compiled server classes...'
	Ant.delete(dir: property.'project.dir.build' + '/server-classes')
	Ant.mkdir(dir: property.'project.dir.build' + '/server-classes')
	targetEnd()
}

target (cleanServerCompileTest: 'clean the compiled server test classes from the build dir') {
	targetStart()
	println()
	println 'Cleaning compiled server test classes...'
	Ant.delete(dir: property.'project.dir.build' + '/server-classes-test')
	Ant.mkdir(dir: property.'project.dir.build' + '/server-classes-test')
	targetEnd()
}

target (compileServer: 'compile server code') {
	targetStart()
	depends(prepare)
	println()
	println 'Compiling server code...'	
	Ant.javac(
		destdir: "${property.'project.dir.build'}/server-classes", 
		classpath: java_compile_server_classpath,
		debug: property.'project.compile.debug', 
		source: property.'project.server.source', 
		target: property.'project.server.target') {
			src(path: property.'project.server.dir' + '/src')
	}

	if(property.'aspectj.ctwOnDeploy' == 'true' && isDeploy && property.'db.dao.mode' == 'SPRING') {
		println()
		println 'Weaving server classes with AspectJ...'
		Ant.iajc(
			classpath:java_compile_server_classpath, 
			source:property.'project.server.source', 
			target:property.'project.server.target', 
			destdir: property.'project.dir.build' + '/server-classes-woven', 
			sourceRootCopyFilter: '**/.svn/*', 
			inpathDirCopyFilter: '**/*.java, **/.svn/*, **/*.class') {
				/*
				sourceroots() {
					pathelement(location: "${property.'project.server.dir'}/src")
				}
				*/
				inpath() {
					pathelement(location: "${property.'project.dir.build'}/server-classes")
				}
				aspectpath() {
					pathelement(location: "${property.'project.dir.tll.libs'}/spring-aspects.jar")
				}
		}
	}
	targetEnd()
}

target (compileServerTest: 'compile server test code') {
	targetStart()
	depends(compileServer)
	println()
	println 'Compiling server test classes...'	
	Ant.javac(destdir: "${property.'project.dir.build'}/server-classes-test", 
		srcdir: property.'project.server.dir' + '/test', 
		classpath: java_compile_server_test_classpath,
		debug: property.'project.compile.debug', 
		source: property.'project.server.source', target: property.'project.server.target')
	targetEnd()
}

target (compileClient: 'compile GWT client code') {
	targetStart()
	depends(compileServer)
	println()
	println 'Compiling client code...'
	Ant.javac(destdir: "${property.'project.dir.build'}/client-classes", 
		srcdir: property.'project.client.dir' + '/src', 
		classpath: java_compile_client_classpath,
		debug: property.'project.compile.debug', 
		source: property.'project.client.compile.source', target: property.'project.client.target')
	targetEnd()
}
 	
target (javadocs: 'Generate documentation') {
	targetStart()
	depends(compileServer)
	depends(compileClient)
	Ant.copy(todir: "${property.'project.dir.build'}/src") {
		fileset(dir: property.'project.server.dir' + '/src') {
			include(name: '**/*.java')
		}
		fileset(dir: property.'project.client.dir' + '/src') {
			include(name: '**/*.java')
		}
	}
	Ant.javadoc(destdir: property.'project.dir.build.docs', 
		author: true,	
		version: true, 
		source: property.'project.server.source',
		packagenames: "${property.'project.package'}.*",
		windowtitle: "${property.'project.name'} (Version ${property.'project.version'})",
		doctitle: "${property.'project.name'} (Version ${property.'project.version'})",
		bottom: property.'project.copyright', 	
		sourcepath: "${property.'project.dir.build'}/src",
		classpath: javadoc_classpath)

	Ant.zip(zipfile: "${property.'project.dir.dist'}/${property.'project.path'}-${property.'project.version'}-src.zip",
		basedir: "${property.'project.dir.build'}/src")
	Ant.copy(todir: "${property.'project.dir.dist'}/docs/api") {
		fileset(dir: property.'project.dir.build.docs')
	}
	Ant.zip(zipfile: "${property.'project.dir.dist'}/${property.'project.path'}-${property.'project.version'}-doc.zip",
		basedir: property.'project.dir.build.docs')
	targetEnd()
}

target (copyServerStatic: 'Copies server dependant non-Java class files to build dir') {
	targetStart()

	// config.properties
	println()
	println('Creating build config.properties file...')
	File f = new File("${property.'project.dir.build.web'}/WEB-INF/classes/config.properties")
	//ConfigKeys cks = ConfigKeys.getClass().newInstance();
	//config.saveAsPropFile(f, cks.getConfigKeys())
	config.saveAsPropFile(f, null, null)

	// log4j.xml (generated)
	createBuildLog4JPropsFile()

	// persistence.xml (generate)
	createBuildPersistenceXmlFile()
	
	// remaining classes/META-INF files
	println()
	println('Copying remaining classpath/META-INF resource files...')
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes/META-INF", preservelastmodified:true) {
		fileset(dir: "${property.'project.server.dir'}/resources") {
			include(name:"aop.xml")
			include(name:"orm.xml")
		}
	}

	// classpath resource files
	println()
	println('Copying remaining classpath resource files...')
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes", preservelastmodified:true, flatten:true) {
		fileset(dir: "${property.'project.server.dir'}/resources") {
			include(name:"ehcache.xml")
			include(name:"mock-entities.xml")
			include(name:"ValidatorMessages.properties")
			include(name:"/db/*.sql")
			include(name:"/db/*.ddl")
		}
	}

	// web.xml file (for both GWT host mode and deploy)
	buildGwtHostModeWebXml()
	buildDeployWebXml()
	
	// copy server test resource files (continuous integration testing!)
	if(property.'project.deploy.mergeTestFiles' == 'true') {
		println()
		println('Copying server test resource files (continuous integration testing!)...')
		Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes", preservelastmodified:true) {
			fileset(dir: "${property.'project.server.dir'}/test") {
				patternset(refid:'ps_classpathResourceFiles')
			}
		}
	}
	
	// email templates
	println()
	println('Copying email templates...')
	Ant.copy(todir: property.'project.dir.build.web' + '/email-templates', preservelastmodified:true) {
		fileset(dir: "${property.'project.server.dir'}/resources/email-templates") {
			include(name:"**/*")
		}
	}
	
	// copy refdata files to classpath root
	println()
	println('Copying refdata files...')
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes", preservelastmodified:true) {
		fileset(dir: "${property.'project.server.dir'}/resources/refdata")
	}
	
	// clone email-templates dir under GWT host dir to keep velocity from fucking up
	println()
	println('Cloning email-templates dir under GWT host dir so velocity sees the files in host mode...')
	Ant.copy(todir: "${property.'gwt.dir.shell.server'}/webapps/ROOT/email-templates") {
		fileset(dir: "${property.'project.server.dir'}/resources/email-templates")
	}

	// re-build GWT's Constants.properties file
	buildGwtConstantsFile()
	targetEnd()
}
	
target (copyServerLib: 'Copies needed library files for the server') {
	targetStart()
	println()
	println 'Aggregating server library files under the build dir...'
	
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/lib", preservelastmodified:true) {
		fileset(dir: property.'project.dir.tll.libs') {
			patternset(refid:'ps_libsDeploy')
		}
	}
	
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/lib", file: "${property.'project.dir.tll'}/config/dist/tll-config.jar", preservelastmodified:true)
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/lib", file: "${property.'project.dir.tll'}/util/dist/tll-util.jar", preservelastmodified:true)
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/lib", file: "${property.'project.dir.tll'}/mail/dist/tll-mail.jar", preservelastmodified:true)
	
	println 'gwt-servlet.jar...'
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/lib", preservelastmodified:true, file: "${property.'gwt.dir.install'}/gwt-servlet.jar")
	
	println 'aspectjrt.jar...'
	Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/lib", preservelastmodified:true, file: "${property.'aspectj.dir.install'}/lib/aspectjrt.jar")
	
	targetEnd()
}

target (copyServerClasses: 'Copies server classes to build dir') {
	targetStart()
	depends(compileServerTest)
	println()
	println 'Copying server .class files...'
	
	// copy server .class files to web dist WEB-INF/classes dir
	if(property.'aspectj.ctwOnDeploy' == 'true' && isDeploy && property.'db.dao.mode' == 'SPRING') {
		Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes", preservelastmodified:true) {
			fileset(dir: "${property.'project.dir.build'}/server-classes-woven")
		}
	} else {
		Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes", preservelastmodified:true) {
			fileset(dir: "${property.'project.dir.build'}/server-classes")
		}
	}
	
	if(property.'project.deploy.mergeTestFiles' == 'true') {
		// copy server test .class files to web dist WEB-INF/classes dir as well (continuous integration testing!)
		Ant.copy(todir: "${property.'project.dir.build.web'}/WEB-INF/classes", preservelastmodified:true) {
			fileset(dir: "${property.'project.dir.build'}/server-classes-test")
		}
	}
	
	targetEnd()
}

target (copyServer: 'Copies server dependant files to build dir') {
	targetStart()
	depends(copyServerClasses)
	depends(copyServerLib)
	depends(copyServerStatic)
	targetEnd()
}

// NOTE: this is not part of the copyClient target so this needs to be run explicitly
target (gwtCompileTests: 'GWT compilation of the UI Tests module') {
	targetStart()
	depends(compileClient)
	gwtCompile(property.'gwt.module.tests')
	targetEnd()
}

target (gwtCompileAdmin: 'GWT compilation of the tests module') {
	targetStart()
	depends(compileClient)
	gwtCompile(property.'gwt.module.admin')
	targetEnd()
}
	
target (copyClient: 'Copies client files to build dir') {
	targetStart()
	depends(gwtCompileAdmin)
	gwtDeleteOldDeploy()
	println()
	println 'Copying GWT compiler output to build web dir...'
	Ant.copy(todir: property.'project.dir.build.web', preservelastmodified:true) {
		fileset(dir: "${property.'project.dir.build'}/${property.'gwt.module.admin'}") {
			include(name: '**/*')	// all found files
			exclude(name: 'Thumbs.db')
			exclude(name: 'hosted.html')
		}
	}
	targetEnd()
}

target (buildServer: 'Build all server related stuff') {
	targetStart()
	depends(copyServer)
	manifest()
	targetEnd()
}

target (buildClient: 'Build all client related stuff') {
	targetStart()
	depends(copyClient)
	clearClientClasses()
	targetEnd()
}
	
target (build: 'Fully populate the build dir making it dist ready') {
	targetStart()
	depends(buildServer)
	depends(buildClient)
	targetEnd()
}

target (createWAR: 'Creates a WAR file from the current state of the app') {
	targetStart()
	println()
	println 'Creating WAR file...'
	Ant.jar(destfile: "${property.'project.dir.dist'}/${property.'app.name'}.war", basedir: property.'project.dir.build.web', manifest: "${property.'project.dir.build'}/META-INF/MANIFEST.MF")
	targetEnd()
}

target (dist: 'Create the distribution file[s]') {
	targetStart()
	isDeploy = true
	depends(build)
	if(property.'project.deploy.asWar' == 'true') {
		depends(createWAR)
	}
	isDeploy = false	// reset
	targetEnd()
}

target (undeploy: 'Removes the app from the deployed server location') {
	targetStart()
	println()
	if(property.'server.type' == 'tomcat') {
	println('Removing old Tomcat deployment (if present)...')
	// remove deployment dir (if present)
	Ant.delete(dir: "${property.'server.dir.deploy'}/${property.'app.name'}", quiet:'true')
	}
	// remove WAR file (if present)
	Ant.delete(file: "${property.'server.dir.deploy'}/${property.'app.name'}.war", quiet:'true')
	targetEnd()
}

target (copyDist: 'Copies the app distribution to the deployment directory') {
	targetStart()
	println()
	if(property.'project.deploy.asWar' == 'true') {
		println 'Deploying app WAR file...'
			Ant.copy(file: "${property.'project.dir.dist'}/${property.'app.name'}.war", tofile: "${property.'server.dir.deploy'}/${property.'app.name'}.war")
	}
	else {
		println 'Deploying app dir...'
		Ant.copy(todir: "${property.'server.dir.deploy'}/${property.'app.name'}", preservelastmodified:true) {
			fileset(dir: property.'project.dir.build.web')
		}
	}
	targetEnd()
}
	 	
target (deploy: 'deploy to target server') {
	targetStart()
	depends(dist)
	depends(undeploy)
	depends(copyDist)
	targetEnd()
}
	
// DB TASKS

target(dbCreate: 'Create the application database') {
	targetStart()
	println()
	println 'Creating the app database...'
	dbCreate(property.'db.name')
	targetEnd()
}

target(dbTestCreate: 'Create the TEST database') {
	targetStart()
	println()
	println 'Creating the TEST database...'
	dbCreate(property.'db.test.name')
	targetEnd()
}

target(dbDelete: 'Delete the application database') {
	targetStart()
	println()
	println 'Deleting the app database...'
	dbDelete(property.'db.name')
	targetEnd()
}

target(dbTestDelete: 'Delete the TEST database') {
	targetStart()
	println()
	println 'Deleting the TEST database...'
	dbDelete(property.'db.test.name')
	targetEnd()
}

target(dbStub: 'Insert stub data into the application database') {
	targetStart()
	println()
	println 'Stubbing the app database...'
	dbStub(property.'db.name')
	targetEnd()
}

target(dbTestStub: 'Insert stub data into the TEST database') {
	targetStart()
	println()
	println 'Stubbing the TEST database...'
	dbStub(property.'db.test.name')
	targetEnd()
}

target(dbClear: 'Delete data from the application database') {
	targetStart()
	println()
	println 'Removing app database data...'
	dbClear(property.'db.name')
	targetEnd()
}

target(dbTestClear: 'Delete data from the TEST database') {
	targetStart()
	println()
	println 'Removing TEST database data...'
	dbClear(property.'db.test.name')
	targetEnd()
}

// TESTS

// TODO figure out how to use this closure (currently we get an error)
/*
def runTest = { String xmlFileName ->
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		xmlfileset(file:"${property.'project.server.dir'}/test/${xmlFileName}")
	}
}
*/

def testPrepare = {
	//Ant.delete(dir: "${property.'project.server.dir'}/test-output", quiet:'true')
}

target(testBootstrap: 'Runs the bootstrapping related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-bootstrap.xml")
	}
}

target(testModel: 'Runs the model related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-model.xml")
	}
}

target(testDao: 'Runs the dao related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		jvmarg(value: '-Xmx256m')
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-dao.xml")
	}
}

target(testEntityService: 'Runs the entity service related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		jvmarg(value: "-javaagent:${property.'aspectj.dir.install'}/lib/aspectjweaver.jar")
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-entity-service.xml")
	}
}

target(testListHandler: 'Runs the IListHandler related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-listhandler.xml")
	}
}

target(testClientModel: 'Runs the client model related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-client-model.xml")
	}
}

target(testServer: 'Runs the server related tests') {
	//depends(buildServer)
	testng(outputdir: "${property.'project.server.dir'}/test-output", classpath: java_run_server_test_classpath, haltonfailure:'true') {
		jvmarg(value: '-ea')
		jvmarg(value: "-javaagent:${property.'aspectj.dir.install'}/lib/aspectjweaver.jar")
		xmlfileset(file:"${property.'project.server.dir'}/test/testng-server.xml")
	}
}
